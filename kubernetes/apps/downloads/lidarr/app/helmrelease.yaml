---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/helm.toolkit.fluxcd.io/helmrelease_v2beta2.json
apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: &app lidarr
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 3.1.0
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  maxHistory: 2
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    controllers:
      lidarr:
        annotations:
          reloader.stakater.com/auto: "true"
          prometheus.io/scrape: "true"
          prometheus.io/port: "monitoring"
        initContainers:
          init-db:
            image:
              repository: ghcr.io/tparker00/postgres-init
              tag: 16.2@sha256:d366b3d2a1e1ffca914fe3f68f9beca9f21b37263b7e82e38c0e83a132461e0c
              pullPolicy: IfNotPresent
            envFrom: &envFrom
              - secretRef:
                  name: lidarr-secret
        containers:
          main:
            nameOverride: *app
            image:
              repository: ghcr.io/tparker00/lidarr-develop
              tag: 2.2.3.4098@sha256:8ae474894be95916c01567125fe62b12a7cf7618cb9a5f40e50425f7678df602
            env:
              TZ: ${TIMEZONE}
              LIDARR__INSTANCE_NAME: Lidarr
              LIDARR__PORT: &port 8080
              LIDARR__LOG_LEVEL: info
            envFrom: *envFrom
            resources:
              requests:
                cpu: 10m
                memory: 250Mi
              limits:
                memory: 1000Mi
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /ping
                    port: *port
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
              startup:
                enabled: false
          metrics:
            image:
              repository: ghcr.io/onedr0p/exportarr
              tag: v2.0.1
              pullPolicy: IfNotPresent
            env:
              - name: PORT
                value: &metricsPort 9794
            envFrom: *envFrom
            args: ["lidarr"]
        pod:
          securityContext:
            runAsUser: 568
            runAsGroup: 568
            fsGroup: 568
            fsGroupChangePolicy: OnRootMismatch
    service:
      main:
        controller: *app
        primary: true
        ports:
          http:
            port: *port
      metrics:
        nameOverride: metrics
        controller: *app
        ports:
          metrics:
            port: *metricsPort
    serviceMonitor:
      main:
        enabled: true
        endpoints:
          - port: metrics
            scheme: http
            path: /metrics
            interval: 1m
            scrapeTimeout: 20s
        serviceName: lidarr-metrics
    ingress:
      main:
        enabled: true
        className: internal
        annotations:
          gethomepage.dev/enabled: "true"
          gethomepage.dev/group: Downloads
          gethomepage.dev/name: Lidarr
          gethomepage.dev/icon: lidarr.png
          gethomepage.dev/widget.type: lidarr
          gethomepage.dev/widget.url: http://lidarr.downloads
          gethomepage.dev/widget.key: "{{HOMEPAGE_VAR_LIDARR_TOKEN}}"
          nginx.ingress.kubernetes.io/configuration-snippet: |
            proxy_set_header Accept-Encoding "";
            sub_filter '</body>' '<link rel="stylesheet" type="text/css" href="https://theme-park.${SECRET_DOMAIN}/css/base/lidarr/nord.css"></body>';
            sub_filter_once on;
        hosts:
          - host: &host "{{ .Release.Name }}.${SECRET_DOMAIN}"
            paths:
              - path: /
                service:
                  identifier: main
                  port: http
              - path: /metrics
                service:
                  identifier: metrics
                  port: metrics
        tls:
          - hosts:
              - *host
    persistence:
      config:
        enabled: true
        existingClaim: *app
        globalMounts:
          - path: /config
      data:
        enabled: true
        type: hostPath
        hostPath: ${SECRET_MFS_DATA:=temp}
        globalMounts:
          - path: /data
