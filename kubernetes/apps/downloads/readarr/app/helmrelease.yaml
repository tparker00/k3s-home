---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/helm.toolkit.fluxcd.io/helmrelease_v2beta2.json
apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: &app readarr
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 3.0.4
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  maxHistory: 2
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    controllers:
      readarr:
        annotations:
          reloader.stakater.com/auto: "true"
          prometheus.io/scrape: "true"
          prometheus.io/port: "monitoring"
        initContainers:
          init-db:
            image:
              repository: ghcr.io/tparker00/postgres-init
              tag: 16.3@sha256:eeb8cfe3a6ee73f8733bd80e405492a5348b83f7c70e5aa1df9b8ac13856c45d
              pullPolicy: IfNotPresent
            envFrom: &envFrom
              - secretRef:
                  name: readarr-secret
        containers:
          main:
            nameOverride: *app
            image:
              repository: ghcr.io/tparker00/readarr-develop
              tag: 0.3.28.2554@sha256:d27e7e023d7536a5d345024b378fa0c52d8d65ba1fdeaf848487a3e0ddd1a60d
            env:
              TZ: ${TIMEZONE}
              READARR__INSTANCE_NAME: Readarr
              READARR__PORT: &port 80
              READARR__LOG_LEVEL: info
            envFrom: *envFrom
            resources:
              requests:
                cpu: 10m
                memory: 250Mi
              limits:
                memory: 1000Mi
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /ping
                    port: *port
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
              startup:
                enabled: false
          metrics:
            image:
              repository: ghcr.io/onedr0p/exportarr
              tag: v2.0.1
              pullPolicy: IfNotPresent
            env:
              - name: PORT
                value: &metricsPort 9794
            envFrom: *envFrom
            args: ["readarr"]
        pod:
          securityContext:
            runAsUser: 568
            runAsGroup: 568
            fsGroup: 568
            fsGroupChangePolicy: OnRootMismatch
    service:
      main:
        controller: *app
        primary: true
        ports:
          http:
            port: *port
      metrics:
        nameOverride: metrics
        controller: *app
        ports:
          metrics:
            port: *metricsPort
    serviceMonitor:
      main:
        enabled: true
        endpoints:
          - port: metrics
            scheme: http
            path: /metrics
            interval: 1m
            scrapeTimeout: 20s
        serviceName: readarr-metrics
    ingress:
      main:
        enabled: true
        className: internal
        annotations:
          gethomepage.dev/enabled: "true"
          gethomepage.dev/group: Downloads
          gethomepage.dev/name: Readarr
          gethomepage.dev/icon: readarr.png
          gethomepage.dev/description: eBook Downloads
          gethomepage.dev/widget.type: readarr
          gethomepage.dev/widget.url: http://readarr.downloads
          gethomepage.dev/widget.key: "{{HOMEPAGE_VAR_READARR_TOKEN}}"
          nginx.ingress.kubernetes.io/configuration-snippet: |
            proxy_set_header Accept-Encoding "";
            sub_filter '</body>' '<link rel="stylesheet" type="text/css" href="https://theme-park.${SECRET_DOMAIN}/css/base/readarr/nord.css"></body>';
            sub_filter_once on;
        hosts:
          - host: &host "{{ .Release.Name }}.${SECRET_DOMAIN}"
            paths:
              - path: /
                service:
                  identifier: main
                  port: http
              - path: /metrics
                service:
                  identifier: metrics
                  port: metrics
        tls:
          - hosts:
              - *host
    persistence:
      config:
        enabled: true
        existingClaim: *app
      tmp:
        type: emptyDir
      data:
        enabled: true
        type: hostPath
        hostPath: ${SECRET_MFS_DATA:=temp}
        globalMounts:
          - path: /data
